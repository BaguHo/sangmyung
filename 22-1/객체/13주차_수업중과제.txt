1. 독립 클래스로 이벤트 리스너 만들기
 class를 따로 선언하여 이벤트 리스너 생성
import javax.swing.*;
import java.awt.Container;
import java.awt.*; 
import java.awt.event.*;

public class document13_1 extends JFrame{
    private JLabel la = new JLabel("Hello");
    public document13_1(){
        setTitle("Mouse 이벤트 예제");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container c = getContentPane();
        JButton button1 = new JButton("Action");
        button1.addActionListener(new EventHandler());
        c.add(button1);
        // c.addMouseListener(new MyMouseListener());
        // c.setLayout(null);
        // la.setSize(50,50);
        // la.setLocation(30,30);
        // c.add(la);
        
        setSize(300,300);
        setVisible(true);
    }
   
    public static void main(String[] args){
        document13_1 frame = new document13_1();
    }
}

public class EventHandler implements ActionListener{
    @Override
    public void actionPerformed(ActionEvent e){
        JButton obj = (JButton)e.getSource();
        if(obj.getText().equals("Action")){
            obj.setText("액션");
        }
        else{
            obj.setText("Action");
        }
    }
}

2. 내부 클래스로 이벤트 리스너 만들기
 독립 클래스와 선언하는 위치는 같지만 private 선언을 해줌으로써 외부에서의 접근 차단
import javax.swing.*;
import java.awt.Container;
import java.awt.*; 
import java.awt.event.*;

public class document13_1 extends JFrame{
    private JLabel la = new JLabel("Hello");
    public document13_1(){
        setTitle("Mouse 이벤트 예제");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container c = getContentPane();
        JButton button1 = new JButton("Action");
        button1.addActionListener(new EventHandler());
        c.add(button1);
        c.addMouseListener(new MyMouseListener());
        c.setLayout(null);
        la.setSize(50,50);
        la.setLocation(30,30);
        c.add(la);
        
        setSize(300,300);
        setVisible(true);
    }

    private class MyMouseListener implements MouseListener{
        public void mousePressed(MouseEvent e){
            int x = e.getX();
            int y = e.getY();   
            la.setLocation(x,y);
        }
    
        public void mouseReleased(MouseEvent e){}
        public void mouseClicked(MouseEvent e){}
        public void mouseEntered(MouseEvent e){}
        public void mouseExited(MouseEvent e){}
    }

    public static void main(String[] args){
        document13_1 frame = new document13_1();
    }
}

public class EventHandler implements ActionListener{
    @Override
    public void actionPerformed(ActionEvent e){
        JButton obj = (JButton)e.getSource();
        if(obj.getText().equals("Action")){
            obj.setText("액션");
        }
        else{
            obj.setText("Action");
        }
    }
}

3. 익명 클래스
class를 선언하지 않고 인스턴스 정의를 한번에 작성 
import javax.swing.*;
import java.awt.Container;
import java.awt.*; 
import java.awt.event.*;

public class document13_1 extends JFrame{
    private JLabel la = new JLabel("Hello");
    public document13_1(){
        setTitle("Mouse 이벤트 예제");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container c = getContentPane();
        JButton button1 = new JButton("Action");
        c.add(button1);
        button1.addMouseListener(new MouseAdapter(){
            public void mousePressed(MouseEvent e){
                JButton obj = (JButton)e.getSource();
                if(obj.getText().equals("Action")){
                    obj.setText("액션");
                }
                else{
                    obj.setText("Action");
                }
        }
        });
        
        setSize(300,300);
        setVisible(true);
    }

    public static void main(String[] args){
        document13_1 frame = new document13_1();
    }
}




 - 어댑터 클래스 
 코딩을 할 때 일일이 재정의 할 필요 없이 XXAdapter를 통하여 
한 번에 재정의 해 줄 수 있다.
// ActionListener처럼 추상 메소드가 하나뿐인 리스너는 어댑터 클래스가 없음

// MouseListener를 이용한 경우
class MyMouseListener implements MouseListener
// MouseAdapter를 이용한 경우
class MyMouseAdapter extends MouseAdapter

